---
name: Create and publish a kube-ovn image

permissions:
  actions: read
  contents: read
  id-token: write
  packages: write
  pull-requests: write
  security-events: write

on:
  pull_request:
    paths:
      - .github/workflows/container-build-kube-ovn.yaml
      - ContainerFiles/kube-ovn
  schedule:
    - cron: '0 0 * * 0'  # Run Weekly at midnight UTC
  workflow_dispatch:
    inputs:
      kube-ovn-version:
        description: 'Version of Kube-OVN to use'
        required: true
        default: "1.14.4"
        type: choice
        options:
          - "1.12.32"
          - "1.13.14"
          - "1.14.4"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/kube-ovn
  # NOTE(cloudnull): This is used to parse the workflow_dispatch inputs, sadly the inputs are not available in the
  #                  workflow_dispatch event, so they're being stored in the environment variables. This is a
  #                  workaround until there's a better way to handle this.
  kube_ovn: >
    ["1.14.4",
     "1.13.14",
     "1.12.32"]
jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      kube-ovn-version: ${{ steps.generate-matrix.outputs.kube_ovn }}
    steps:
      - name: generate-matrix
        id: generate-matrix
        run: |
          if [ "${{ github.event_name == 'workflow_dispatch' }}" = "true" ]; then
            kube_ovn="$(echo '${{ github.event.inputs.kube-ovn-version }}' | jq -R '[select(length>0)]' | jq -c '.')"
          fi
          echo "kube_ovn=${kube_ovn:-${{ env.kube_ovn }}}" >> $GITHUB_OUTPUT
  build-and-push-image:
    needs:
      - init
    strategy:
      matrix:
        kube-ovn-version: ${{ fromJSON(needs.init.outputs.kube-ovn-version) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Dynamically set MY_DATE environment variable
        run: echo "MY_DATE=$(date +%s)" >> $GITHUB_ENV
      - name: Dynamically set environment variables
        run: |
          VERSION=$(echo -n "${{ matrix.kube-ovn-version }}" | awk -F'/' '{($2=="" ? x=$1 : x=$2); print x}')
          echo "OS_VERSION_PARSE=${VERSION}" >> $GITHUB_ENV
          NAME=$(echo -n "${{ env.IMAGE_NAME }}" | awk -F'/' '{print $NF}')
          echo "CATEGORY_NAME=${VERSION}-${NAME}" >> $GITHUB_ENV
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ContainerFiles/kube-ovn
          push: false
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ env.IMAGE_NAME }}:local
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            KUBE_OVN_VERSION=${{ matrix.kube-ovn-version }}
            CACHEBUST=${{ github.sha }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
        with:
          image-ref: '${{ env.IMAGE_NAME }}:local'
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH,MEDIUM'
      - name: Upload Trivy scan results to GitHub Security tab
        continue-on-error: true
        if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: "${{ env.CATEGORY_NAME }}"
      - name: Run Trivy scanner
        uses: aquasecurity/trivy-action@0.28.0
        if: ${{ github.event_name == 'pull_request' }}
        with:
          image-ref: '${{ env.IMAGE_NAME }}:local'
          output: trivy.txt
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH,MEDIUM'
      - name: Create trivy output file in markdown format
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          if [[ -s trivy.txt ]]; then
              echo "### Security Output" > trivy-output.txt
              echo '```terraform' >> trivy-output.txt
              cat trivy.txt >> trivy-output.txt
              echo '```' >> trivy-output.txt
          fi
      - name: Publish Trivy Output to Summary
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          if [[ -s trivy-output.txt ]]; then
            {
              cat trivy-output.txt
            } >> $GITHUB_STEP_SUMMARY
          fi
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ContainerFiles/kube-ovn
          push: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.MY_DATE }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            KUBE_OVN_VERSION=${{ matrix.kube-ovn-version }}
            CACHEBUST=${{ github.sha }}
